generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

enum PurchaseStatus {
  PENDING      //รอชำระเงิน 
  COMPLETED    //ชำระเงินสำเร็จ 
  FAILED       //ชำระเงินไม่สำเร็จ
  REFUNDED     //คืนเงิน
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  avatar        String?
  role          Role           @default(USER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  sellerProfile SellerProfile?
  sheets        Sheet[]        @relation("SellerSheets")
  purchases     Purchase[]
  reviews       Review[]
  refreshTokens RefreshToken[]
  
  @@map("users")
}

model SellerProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shopName        String
  description     String?
  bankAccount     String?
  status          SellerStatus  @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@index([shopName])
  @@map("seller_profiles")
}

model Sheet {
  id           String     @id @default(uuid())
  title        String
  description  String
  subject      String
  year         String?     //ชั้นปี
  faculty      String?     //คณะ
  department   String?     //สาขา
  university   String?     //มหาวิทยาลัย
  price        Decimal    @db.Decimal(10, 2)
  fileUrl      String
  thumbnailUrl String?
  
  sellerId     String
  seller       User       @relation("SellerSheets", fields: [sellerId], references: [id])
  
  isActive     Boolean    @default(true)
  viewCount    Int        @default(0)
  purchaseCount Int       @default(0)

  averageRating Decimal?  @db.Decimal(3, 2) 
  reviewCount   Int       @default(0)
  
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  purchases    Purchase[]
  reviews      Review[]
  
  @@index([subject])
  @@index([university])
  @@index([faculty])
  @@index([sellerId])
  @@index([isActive])      
  @@index([createdAt])     
  @@index([price])         
  @@index([purchaseCount])
  @@index([averageRating])
  @@map("sheets")
}

model Review {
  id        String   @id @default(uuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sheetId   String
  sheet     Sheet    @relation(fields: [sheetId], references: [id], onDelete: Cascade)
  
  rating    Int    
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, sheetId])
  @@index([sheetId])
  @@index([userId])
  @@map("reviews")
}

model Purchase {
  id          String         @id @default(uuid())
  
  userId      String
  user        User           @relation(fields: [userId], references: [id])
  
  sheetId     String
  sheet       Sheet          @relation(fields: [sheetId], references: [id])
  
  price       Decimal        @db.Decimal(10, 2)
  status      PurchaseStatus @default(PENDING)
  
  //Stripe 
  stripeSessionId    String?  @unique //Checkout Session ID
  stripePaymentIntentId String? @unique //Payment Intent ID
  
  purchasedAt DateTime       @default(now())
  completedAt DateTime?      
  
  @@unique([userId, sheetId]) 
  @@index([userId])
  @@index([sheetId])
  @@index([status])
  @@index([stripeSessionId])
  @@map("purchases")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("refresh_tokens")
}