// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  SELLER
  ADMIN
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  role          Role           @default(USER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  sellerProfile SellerProfile?
  sheets        Sheet[]        @relation("SellerSheets")
  purchases     Purchase[]
  
  @@map("users")
}

model SellerProfile {
  id              String        @id @default(uuid())
  userId          String        @unique
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  shopName        String
  description     String?
  bankAccount     String?
  status          SellerStatus  @default(PENDING)
  approvedAt      DateTime?
  approvedBy      String?
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  @@map("seller_profiles")
}

model Sheet {
  id          String     @id @default(uuid())
  title       String
  description String
  subject     String
  price       Decimal    @db.Decimal(10, 2)
  fileUrl     String
  thumbnailUrl String?
  
  sellerId    String
  seller      User       @relation("SellerSheets", fields: [sellerId], references: [id])
  
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  purchases   Purchase[]
  
  @@map("sheets")
}

model Purchase {
  id          String   @id @default(uuid())
  
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  sheetId     String
  sheet       Sheet    @relation(fields: [sheetId], references: [id])
  
  price       Decimal  @db.Decimal(10, 2)
  purchasedAt DateTime @default(now())
  
  @@unique([userId, sheetId])
  @@map("purchases")
}
